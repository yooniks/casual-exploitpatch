package xyz.yooniks.exploitpatch.bungee.listener;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import java.net.SocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.Connection;
import net.md_5.bungee.api.event.PluginMessageEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;

public class PayloadListener implements Listener {

  private final Cache<SocketAddress, Integer> payloads = CacheBuilder.newBuilder()
      .expireAfterWrite(10, TimeUnit.SECONDS)
      .build();

  @EventHandler(priority = EventPriority.LOWEST)
  public void onPluginMessage(PluginMessageEvent event) {
    final String channel = event.getTag();
    final Connection sender = event.getSender();
    if (!channel.equalsIgnoreCase("MC|BEdit")
        && !channel.equalsIgnoreCase("MC|BSign")
        && !channel.equalsIgnoreCase("REGISTER")) {
      return;
    }
    //idk if is it even sent to bungee, haven't checked yet, too lazy
    if (channel.equalsIgnoreCase("MC|BEdit") || channel.equalsIgnoreCase("MC|BSign")) {
      event.setCancelled(true);
      return;
    }

    final int channelsSize = new String(event.getData(), StandardCharsets.UTF_8)
        .split("\0").length;
    if (channelsSize > 124) {
      event.setCancelled(true);
      sender.disconnect(TextComponent.fromLegacyText("Nice try bro=("));
      return;
    }

    try {
      final int currentPayloads = this.payloads.get(sender.getAddress(), () -> 1);
      this.payloads.put(sender.getAddress(), currentPayloads + 1);

      if (currentPayloads > 15) {
        event.setCancelled(true);
        sender.disconnect(TextComponent.fromLegacyText("Nice try bro=("));
      }

    }
    catch (ExecutionException ex) {
      event.setCancelled(true);
      ex.printStackTrace();
    }
  }

}
