package xyz.yooniks.exploitpatch.bukkit;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.PacketType.Play.Client;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import java.util.ArrayList;
import java.util.List;
import org.bukkit.plugin.java.JavaPlugin;
import xyz.yooniks.exploitpatch.bukkit.connection.ConnectionCloser;
import xyz.yooniks.exploitpatch.bukkit.connection.DefaultConnectionCloser;
import xyz.yooniks.exploitpatch.bukkit.listener.ArmAnimationListener;
import xyz.yooniks.exploitpatch.bukkit.listener.ItemPacketListener;
import xyz.yooniks.exploitpatch.bukkit.listener.PayloadListener;
import xyz.yooniks.exploitpatch.bukkit.nbt.NBTBigDataChecker;
import xyz.yooniks.exploitpatch.bukkit.nbt.NBTChecker;

public final class ExploitPatchPlugin extends JavaPlugin {

  private ProtocolManager protocolManager;
  private List<NBTChecker> nbtCheckers = new ArrayList<>();

  @Override
  public void onEnable() {
    this.saveDefaultConfig();
    //you can add your own nbtchecker implementation to list
    this.nbtCheckers.add(new NBTBigDataChecker());

    if (!this.getServer().getPluginManager().isPluginEnabled("ViaVersion")) {
      this.getLogger().warning("Please download viaversion and use the latest spigot version!");
    }

    this.protocolManager = ProtocolLibrary.getProtocolManager();

    //you can easily add implementation for your version and easily close connection the other way
    final ConnectionCloser connectionCloser = new DefaultConnectionCloser(this);

    if (this.getConfig().getBoolean("arm-animation.enabled")) {
      final ArmAnimationListener armAnimationListener = new ArmAnimationListener(this,
          this.getConfig().getLong("arm-animation.timestamp"));
      this.protocolManager.addPacketListener(armAnimationListener);
      this.getServer().getPluginManager().registerEvents(armAnimationListener, this);
    }

    this.protocolManager.addPacketListener(new ItemPacketListener(
        this, connectionCloser, this.nbtCheckers,
        this.packetTypes(this.getConfig().getBoolean("block-place.enabled"))));

    this.protocolManager.addPacketListener(new PayloadListener(
        this, connectionCloser, this.getConfig().getInt("payload.limit", 15)));

    this.getLogger().info("Thanks for using my exploit patch! Discord contact: yooniks#9012");
  }

  @Override
  public void onDisable() {
    this.protocolManager = null;
  }

  private PacketType[] packetTypes(boolean blockPlace) {
    return blockPlace
        ? new PacketType[]{Client.WINDOW_CLICK, Client.SET_CREATIVE_SLOT, Client.BLOCK_PLACE}
        : new PacketType[]{Client.WINDOW_CLICK, Client.SET_CREATIVE_SLOT};
  }

}
