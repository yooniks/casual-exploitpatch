package xyz.yooniks.exploitpatch.bukkit.listener;

import com.comphenix.protocol.PacketType.Play.Client;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import xyz.yooniks.exploitpatch.bukkit.connection.ConnectionCloser;

public class PayloadListener extends PacketAdapter {

  private final Callable<Integer> valueLoader = () -> 1;
  private final Cache<UUID, Integer> payloads = CacheBuilder.newBuilder()
      .expireAfterWrite(10, TimeUnit.SECONDS)
      .build();

  private final ConnectionCloser connectionCloser;
  private final int payloadLimit;
  private final List<String> blockedChannels;


  public PayloadListener(Plugin plugin, ConnectionCloser connectionCloser, int payloadLimit,
      List<String> blockedChannels) {
    super(plugin, ListenerPriority.LOWEST, Client.CUSTOM_PAYLOAD);
    this.connectionCloser = connectionCloser;
    this.payloadLimit = payloadLimit;
    this.blockedChannels = blockedChannels;
  }

  @Override
  public void onPacketReceiving(PacketEvent event) {
    final Player player = event.getPlayer();
    if (player == null || this.connectionCloser.isClosing(player)) {
      event.setCancelled(true);
      return;
    }
    if (player.getListeningPluginChannels().size() > 124) {
      event.setCancelled(true);
      this.connectionCloser.close(player);
      return;
    }
    final PacketContainer packet = event.getPacket();
    final String channel;
    if (packet.getStrings().size() < 1) {
      channel = packet.getMinecraftKeys().readSafely(0).getFullKey();
    } else {
      channel = packet.getStrings().readSafely(0);
    }
    if (this.blockedChannels.contains(channel.toLowerCase())) {
      event.setCancelled(true);
      this.connectionCloser.close(player);
      return;
    }
    if (channel.equalsIgnoreCase("MC|BEdit") || channel.equalsIgnoreCase("MC|BSign")) {
      event.setCancelled(true);
      //unfortunately cancelling without checking what is inside =(
      return;
    }
    try {
      final int currentPayloads = this.payloads.get(player.getUniqueId(), this.valueLoader);
      this.payloads.put(player.getUniqueId(), currentPayloads + 1);

      if (currentPayloads > this.payloadLimit) {
        event.setCancelled(true);
        this.connectionCloser.close(player);
      }
    }
    catch (ExecutionException ex) {
      event.setCancelled(true);
    }
  }


}
